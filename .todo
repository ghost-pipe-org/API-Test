
---

### ‚úÖ **1. Entidade unificada: `user`**

```ts
User
- id: UUID (PK)
- name: VARCHAR(100)
- enrollment: VARCHAR(9) (opcional, obrigat√≥rio para mestres)
- phone_number: VARCHAR(20) (opcional)
- email: VARCHAR(255) UNIQUE NOT NULL
- password: VARCHAR(255) NOT NULL
- role: ENUM("player", "master", "admin") DEFAULT "player"
- created_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP
- updated_at: TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
```

---

### ‚úÖ **2. Lista de Tarefas (Backlog do Projeto)**

Organizadas por prioridade e agrupadas por dom√≠nio de funcionalidade:

---

#### üîê **Autentica√ß√£o e Cadastro**

* [x] Criar endpoint de cadastro de usu√°rios (`/register`)
* [x] Validar matr√≠cula obrigat√≥ria ao cadastrar como mestre
* [x] Criar endpoint de login (`/login`)
* [x] Implementar autentica√ß√£o JWT segura
* [x] Middleware para verificar autentica√ß√£o e papel do usu√°rio (player, master, admin)

---

#### üßæ **Gerenciamento de Sess√µes (Player)**

* [ ] Criar endpoint para listar sess√µes dispon√≠veis com filtros (t√≠tulo, sistema, vagas restantes)
* [ ] Implementar l√≥gica de verifica√ß√£o de conflitos de data/per√≠odo ao se inscrever
* [ ] Criar endpoint para inscri√ß√£o em sess√£o
* [ ] Impedir inscri√ß√£o duplicada na mesma sess√£o
* [ ] Criar endpoint para cancelamento de inscri√ß√£o (restrito a 72h antes)
* [ ] Criar sistema de notifica√ß√µes (ex: por email ou painel interno) sobre:

  * Inscri√ß√£o confirmada
  * Cancelamento confirmado
  * Sess√£o cancelada pelo mestre

---

#### üìÖ **Solicita√ß√£o de Sess√µes (Master)**

* [ ] Criar endpoint para solicita√ß√£o de sess√£o (emiss√£o de ticket)
* [ ] Validar se j√° existe uma solicita√ß√£o ativa
* [ ] Validar campos obrigat√≥rios: t√≠tulo, descri√ß√£o, sistema, data(s), per√≠odo e vagas
* [ ] Criar endpoint para cancelamento de ticket (antes da aprova√ß√£o)
* [ ] Implementar sistema de notifica√ß√µes para:

  * Ticket aprovado
  * Ticket rejeitado (com motivo)
  * Sess√£o lotada
  * Fim do per√≠odo de inscri√ß√µes
* [ ] Criar endpoint para cancelamento de sess√£o aprovada (com justificativa e 72h de anteced√™ncia)

---

#### üõ†Ô∏è **Painel de Aprova√ß√£o (Admin)**

* [ ] Criar painel/admin endpoint para listar todas as solicita√ß√µes pendentes
* [ ] Implementar l√≥gica de verifica√ß√£o de disponibilidade de salas (mock ou estrutura de datas)
* [ ] Criar endpoint para aprovar ou rejeitar uma sess√£o
* [ ] Enviar notifica√ß√£o com motivo de rejei√ß√£o ou aprova√ß√£o para o mestre
* [ ] Garantir login exclusivo e restrito para administradores

---

#### üß† **Valida√ß√µes de Neg√≥cio**

* [ ] Impedir inscri√ß√µes simult√¢neas com conflito de hor√°rio/per√≠odo
* [ ] Permitir apenas uma sess√£o ativa por mestre at√© decis√£o do admin
* [ ] Garantir que apenas usu√°rios com matr√≠cula possam ser mestres
* [ ] Limitar cancelamentos (tanto por jogadores quanto mestres) com base em tempo restante

---

#### üß™ **Infraestrutura e Qualidade**

* [ ] Criar modelo de dados no banco com integridade entre users, sessions e inscri√ß√µes
* [ ] Implementar testes unit√°rios e E2E para funcionalidades principais
* [ ] Garantir responsividade e usabilidade no frontend
* [ ] Garantir autentica√ß√£o e senhas seguras (hash, bcrypt, etc.)
* [ ] Criar documenta√ß√£o b√°sica da API com Swagger ou equivalente

---

#### üõ°Ô∏è **Requisitos N√£o Funcionais**

* [ ] Implementar responsividade para mobile no frontend
* [ ] Garantir desempenho m√≠nimo para X usu√°rios simult√¢neos (testes de carga)
* [ ] Aplicar pr√°ticas de LGPD e prote√ß√£o de dados da universidade
* [ ] Implementar controle de erros e feedbacks claros no frontend

---